// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Ballerina.flex

/*
 * Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package io.ballerina.plugins.idea;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import io.ballerina.plugins.idea.psi.BallerinaTypes;


class BallerinaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TEMPLATE_MODE = 2;
  public static final int END_MODE = 4;
  public static final int MARKDOWN_DOCUMENTATION_MODE = 6;
  public static final int MARKDOWN_PARAMETER_DOCUMENTATION_MODE = 8;
  public static final int SINGLE_BACKTICKED_MARKDOWN_MODE = 10;
  public static final int REEGX_MODE = 12;
  public static final int FLAG_MODE = 14;
  public static final int TEST = 16;
  public static final int BACKTICK_MODE = 18;
  public static final int EXPR_BACKTICK_MODE = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  2,  2,  2,  2, 
     6,  6,  7,  7,  8, 8
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\1\u0300\12\u0400\4\u0100\1\u0500\247\u0100"+
    "\3\u0600\1\u0700\4\u0800\31\u0400\4\u0100\1\u0900\1\u0a00\u1001\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\2\27\1\30\1\27\1\31\3\27\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\3\41\1\42\1\43\1\44"+
    "\11\45\1\46\7\45\1\47\2\45\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\1\45\1\107\1\110\1\111"+
    "\1\112\1\0\5\54\1\113\33\54\7\0\1\54\1\0"+
    "\1\54\2\0\1\54\1\0\1\54\2\0\4\54\2\0"+
    "\3\54\1\0\3\54\1\0\27\54\1\0\37\54\1\0"+
    "\u0116\54\2\114\30\0\2\115\6\54\57\0\u0131\54\u0170\0"+
    "\1\54\3\0\4\54\31\0\17\54\1\0\317\54\u0180\113"+
    "\u0180\116\76\54\2\0\u0105\54\2\0\271\54";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[2816];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\1\1\31\1\32\1\33\25\27"+
    "\1\34\1\35\1\36\1\37\1\40\2\41\1\42\1\43"+
    "\1\44\1\43\1\45\10\43\2\1\1\46\1\47\1\1"+
    "\2\50\1\51\1\24\3\27\1\1\1\35\1\52\1\40"+
    "\1\1\1\53\1\54\1\55\1\0\1\56\1\0\1\4"+
    "\1\57\1\60\1\0\1\61\1\0\1\62\1\63\1\64"+
    "\1\65\1\66\1\0\1\62\2\0\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\0\2\27\1\77"+
    "\3\27\1\100\5\27\1\101\14\27\1\102\1\27\1\103"+
    "\1\104\12\27\1\105\22\27\1\106\1\107\1\110\3\0"+
    "\1\111\11\43\3\0\1\50\1\112\3\27\1\113\1\114"+
    "\1\0\1\115\1\56\2\0\1\116\1\117\1\120\2\0"+
    "\1\62\1\0\1\121\1\122\1\0\2\27\1\123\37\27"+
    "\1\124\3\27\1\125\1\126\3\27\1\127\2\27\1\130"+
    "\10\27\1\0\1\131\17\27\1\132\4\27\1\133\11\43"+
    "\1\0\1\50\1\134\1\0\1\135\1\27\1\133\3\0"+
    "\1\136\2\0\7\27\1\137\13\27\1\140\1\141\3\27"+
    "\1\142\6\27\1\143\1\144\5\27\1\145\1\146\2\27"+
    "\1\147\2\27\1\150\26\27\1\151\1\152\1\153\1\154"+
    "\4\27\11\43\1\0\1\27\2\0\1\155\1\0\1\136"+
    "\7\27\1\156\1\157\1\160\5\27\1\161\4\27\1\0"+
    "\1\27\1\162\1\27\1\163\1\164\1\165\1\166\1\167"+
    "\6\27\1\170\1\27\1\171\1\172\1\27\1\173\1\174"+
    "\1\175\7\27\1\176\5\27\1\177\2\27\1\200\3\27"+
    "\1\201\1\202\1\27\1\203\7\43\1\204\1\43\1\27"+
    "\2\0\4\27\1\205\1\206\2\27\1\207\1\27\1\210"+
    "\6\27\1\0\1\211\3\27\1\212\1\213\1\214\2\27"+
    "\1\215\2\27\1\216\1\27\1\217\1\220\1\27\1\221"+
    "\1\27\1\222\1\27\1\223\1\224\1\225\2\27\1\226"+
    "\1\227\6\43\1\230\1\43\1\225\2\0\2\27\1\231"+
    "\1\27\1\232\1\27\1\233\3\27\1\234\2\27\1\235"+
    "\1\27\1\236\4\27\1\237\2\27\1\240\1\27\1\241"+
    "\1\0\2\27\1\43\1\242\5\43\2\0\1\243\4\27"+
    "\1\244\1\245\1\27\1\246\1\247\1\250\1\251\1\252"+
    "\1\27\1\253\1\254\1\255\1\27\1\256\2\43\1\257"+
    "\3\43\1\0\1\260\1\27\1\261\3\27\1\262\1\27"+
    "\3\43\1\263\1\43\1\0\1\264\1\265\1\27\1\266"+
    "\1\27\1\43\1\267\1\43\1\270\1\0\1\27\1\271"+
    "\1\43\1\272\1\0\1\273\1\27\1\274\1\0\1\275"+
    "\3\276\11\0\1\277";

  private static int [] zzUnpackAction() {
    int [] result = new int[666];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\355\0\u013c\0\u018b\0\u01da\0\u0229"+
    "\0\u0278\0\u02c7\0\u02c7\0\u0316\0\u0365\0\u03b4\0\u02c7\0\u0403"+
    "\0\u0452\0\u02c7\0\u02c7\0\u02c7\0\u02c7\0\u02c7\0\u04a1\0\u04f0"+
    "\0\u053f\0\u058e\0\u05dd\0\u02c7\0\u02c7\0\u062c\0\u067b\0\u06ca"+
    "\0\u0719\0\u02c7\0\u0452\0\u02c7\0\u0768\0\u02c7\0\u02c7\0\u02c7"+
    "\0\u07b7\0\u0806\0\u0855\0\u08a4\0\u08f3\0\u0942\0\u0991\0\u09e0"+
    "\0\u0a2f\0\u0a7e\0\u0acd\0\u0b1c\0\u0b6b\0\u0bba\0\u0c09\0\u0c58"+
    "\0\u0ca7\0\u0cf6\0\u0d45\0\u0d94\0\u0de3\0\u0e32\0\u0e81\0\u02c7"+
    "\0\u02c7\0\u0ed0\0\u0f1f\0\u0f6e\0\u02c7\0\u0fbd\0\u02c7\0\u100c"+
    "\0\u02c7\0\u105b\0\u10aa\0\u10f9\0\u1148\0\u1197\0\u11e6\0\u1235"+
    "\0\u1284\0\u12d3\0\u1322\0\u1371\0\u1322\0\u13c0\0\u140f\0\u145e"+
    "\0\u02c7\0\u14ad\0\u14fc\0\u154b\0\u159a\0\u15e9\0\u1638\0\u02c7"+
    "\0\u1687\0\u16d6\0\u02c7\0\u02c7\0\u1725\0\u0365\0\u02c7\0\u1774"+
    "\0\u17c3\0\u1812\0\u02c7\0\u0768\0\u1861\0\u18b0\0\u18ff\0\u02c7"+
    "\0\u02c7\0\u194e\0\u199d\0\u19ec\0\u02c7\0\u1a3b\0\u1a8a\0\u02c7"+
    "\0\u02c7\0\u02c7\0\u1ad9\0\u02c7\0\u02c7\0\u02c7\0\u02c7\0\u1b28"+
    "\0\u1b77\0\u1bc6\0\u1c15\0\u1c64\0\u1cb3\0\u1d02\0\u1d51\0\u1da0"+
    "\0\u1def\0\u1e3e\0\u1e8d\0\u1edc\0\u0452\0\u1f2b\0\u1f7a\0\u1fc9"+
    "\0\u2018\0\u2067\0\u20b6\0\u2105\0\u2154\0\u21a3\0\u21f2\0\u2241"+
    "\0\u2290\0\u0452\0\u22df\0\u232e\0\u237d\0\u23cc\0\u241b\0\u246a"+
    "\0\u24b9\0\u2508\0\u2557\0\u25a6\0\u25f5\0\u2644\0\u2693\0\u0452"+
    "\0\u26e2\0\u2731\0\u2780\0\u27cf\0\u281e\0\u286d\0\u28bc\0\u290b"+
    "\0\u295a\0\u29a9\0\u29f8\0\u2a47\0\u2a96\0\u2ae5\0\u2b34\0\u2b83"+
    "\0\u2bd2\0\u2c21\0\u02c7\0\u02c7\0\u02c7\0\u2c70\0\u0f6e\0\u0f1f"+
    "\0\u02c7\0\u2cbf\0\u2d0e\0\u2d5d\0\u2dac\0\u2dfb\0\u2e4a\0\u2e99"+
    "\0\u2ee8\0\u2f37\0\u12d3\0\u13c0\0\u2f86\0\u2fd5\0\u3024\0\u3073"+
    "\0\u30c2\0\u3111\0\u02c7\0\u02c7\0\u16d6\0\u02c7\0\u0365\0\u3160"+
    "\0\u31af\0\u02c7\0\u02c7\0\u02c7\0\u31fe\0\u324d\0\u329c\0\u32eb"+
    "\0\u333a\0\u02c7\0\u3389\0\u33d8\0\u3427\0\u3476\0\u34c5\0\u3514"+
    "\0\u3563\0\u35b2\0\u3601\0\u3650\0\u369f\0\u36ee\0\u373d\0\u378c"+
    "\0\u37db\0\u382a\0\u3879\0\u38c8\0\u3917\0\u3966\0\u39b5\0\u3a04"+
    "\0\u3a53\0\u3aa2\0\u3af1\0\u3b40\0\u3b8f\0\u3bde\0\u3c2d\0\u3c7c"+
    "\0\u3ccb\0\u3d1a\0\u3d69\0\u3db8\0\u3e07\0\u0452\0\u3e56\0\u3ea5"+
    "\0\u3ef4\0\u0452\0\u0452\0\u3f43\0\u3f92\0\u3fe1\0\u0452\0\u4030"+
    "\0\u407f\0\u0452\0\u40ce\0\u411d\0\u416c\0\u41bb\0\u420a\0\u4259"+
    "\0\u42a8\0\u42f7\0\u4346\0\u02c7\0\u4395\0\u43e4\0\u4433\0\u4482"+
    "\0\u44d1\0\u4520\0\u456f\0\u45be\0\u460d\0\u465c\0\u46ab\0\u46fa"+
    "\0\u4749\0\u4798\0\u47e7\0\u0452\0\u4836\0\u4885\0\u48d4\0\u4923"+
    "\0\u4972\0\u49c1\0\u4a10\0\u4a5f\0\u4aae\0\u4afd\0\u4b4c\0\u4b9b"+
    "\0\u4bea\0\u4c39\0\u4c88\0\u4cd7\0\u02c7\0\u4d26\0\u02c7\0\u4d75"+
    "\0\u4dc4\0\u4e13\0\u4e62\0\u4eb1\0\u4f00\0\u4f4f\0\u4f9e\0\u4fed"+
    "\0\u503c\0\u508b\0\u50da\0\u5129\0\u5178\0\u51c7\0\u0452\0\u5216"+
    "\0\u5265\0\u52b4\0\u5303\0\u5352\0\u53a1\0\u53f0\0\u543f\0\u548e"+
    "\0\u54dd\0\u552c\0\u557b\0\u0452\0\u55ca\0\u5619\0\u5668\0\u0452"+
    "\0\u56b7\0\u5706\0\u5755\0\u57a4\0\u57f3\0\u5842\0\u0452\0\u0452"+
    "\0\u5891\0\u58e0\0\u592f\0\u597e\0\u59cd\0\u0452\0\u0452\0\u5a1c"+
    "\0\u5a6b\0\u0452\0\u5aba\0\u5b09\0\u0452\0\u5b58\0\u5ba7\0\u5bf6"+
    "\0\u5c45\0\u5c94\0\u5ce3\0\u5d32\0\u5d81\0\u5dd0\0\u5e1f\0\u5e6e"+
    "\0\u5ebd\0\u5f0c\0\u5f5b\0\u5faa\0\u5ff9\0\u6048\0\u6097\0\u60e6"+
    "\0\u6135\0\u6184\0\u61d3\0\u0452\0\u0452\0\u6222\0\u0452\0\u6271"+
    "\0\u62c0\0\u630f\0\u635e\0\u63ad\0\u63fc\0\u644b\0\u649a\0\u64e9"+
    "\0\u6538\0\u6587\0\u65d6\0\u6625\0\u6674\0\u66c3\0\u6712\0\u6761"+
    "\0\u02c7\0\u67b0\0\u67b0\0\u67ff\0\u684e\0\u689d\0\u68ec\0\u693b"+
    "\0\u698a\0\u69d9\0\u0452\0\u6a28\0\u0452\0\u6a77\0\u6ac6\0\u6b15"+
    "\0\u6b64\0\u6bb3\0\u0452\0\u6c02\0\u6c51\0\u6ca0\0\u6cef\0\u6d3e"+
    "\0\u6d8d\0\u0452\0\u6ddc\0\u0452\0\u0452\0\u0452\0\u0452\0\u0452"+
    "\0\u6e2b\0\u6e7a\0\u6ec9\0\u6f18\0\u6f67\0\u6fb6\0\u0452\0\u7005"+
    "\0\u0452\0\u0452\0\u7054\0\u0452\0\u0452\0\u0452\0\u70a3\0\u70f2"+
    "\0\u7141\0\u7190\0\u71df\0\u722e\0\u727d\0\u0452\0\u72cc\0\u731b"+
    "\0\u736a\0\u73b9\0\u7408\0\u0452\0\u7457\0\u74a6\0\u0452\0\u74f5"+
    "\0\u7544\0\u7593\0\u0452\0\u0452\0\u75e2\0\u0452\0\u7631\0\u7680"+
    "\0\u76cf\0\u771e\0\u776d\0\u77bc\0\u780b\0\u02c7\0\u785a\0\u78a9"+
    "\0\u78f8\0\u7947\0\u7996\0\u79e5\0\u7a34\0\u7a83\0\u0452\0\u0452"+
    "\0\u7ad2\0\u7b21\0\u0452\0\u7b70\0\u0452\0\u7bbf\0\u7c0e\0\u7c5d"+
    "\0\u7cac\0\u7cfb\0\u7d4a\0\u7d99\0\u0452\0\u7de8\0\u7e37\0\u7e86"+
    "\0\u0452\0\u0452\0\u0452\0\u7ed5\0\u7f24\0\u0452\0\u7f73\0\u7fc2"+
    "\0\u0452\0\u8011\0\u0452\0\u0452\0\u8060\0\u80af\0\u80fe\0\u0452"+
    "\0\u814d\0\u0452\0\u0452\0\u819c\0\u81eb\0\u823a\0\u0452\0\u0452"+
    "\0\u8289\0\u82d8\0\u8327\0\u8376\0\u83c5\0\u8414\0\u02c7\0\u8463"+
    "\0\u0452\0\u84b2\0\u8501\0\u8550\0\u859f\0\u0452\0\u85ee\0\u0452"+
    "\0\u863d\0\u0452\0\u868c\0\u86db\0\u872a\0\u0452\0\u8779\0\u87c8"+
    "\0\u02c7\0\u8817\0\u0452\0\u8866\0\u88b5\0\u8904\0\u8953\0\u0452"+
    "\0\u89a2\0\u89f1\0\u0452\0\u8a40\0\u0452\0\u8a8f\0\u8ade\0\u8b2d"+
    "\0\u8b7c\0\u02c7\0\u8bcb\0\u8c1a\0\u8c69\0\u8cb8\0\u8d07\0\u8d56"+
    "\0\u8da5\0\u0452\0\u8df4\0\u8e43\0\u8e92\0\u8ee1\0\u0452\0\u0452"+
    "\0\u8f30\0\u0452\0\u0452\0\u0452\0\u0452\0\u0452\0\u8f7f\0\u0452"+
    "\0\u0452\0\u0452\0\u8fce\0\u0452\0\u901d\0\u906c\0\u02c7\0\u90bb"+
    "\0\u910a\0\u9159\0\u91a8\0\u91f7\0\u9246\0\u0452\0\u9295\0\u92e4"+
    "\0\u9333\0\u0452\0\u9382\0\u93d1\0\u9420\0\u946f\0\u02c7\0\u94be"+
    "\0\u950d\0\u0452\0\u0452\0\u955c\0\u0452\0\u95ab\0\u95fa\0\u02c7"+
    "\0\u9649\0\u02c7\0\u9698\0\u96e7\0\u9736\0\u9785\0\u02c7\0\u97d4"+
    "\0\u0452\0\u9823\0\u02c7\0\u9872\0\u0452\0\u98c1\0\u9910\0\u995f"+
    "\0\u99ae\0\u99fd\0\u9a4c\0\u9a9b\0\u9aea\0\u9b39\0\u9b88\0\u9bd7"+
    "\0\u9c26\0\u9c75";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[666];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\2\13\1\12\2\13\1\14\1\15\1\16\1\12"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\4\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\7\43\1\44\1\45\1\46"+
    "\1\47\1\43\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\43\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\43\1\70\1\71\1\72\1\43"+
    "\1\73\1\74\1\75\1\43\1\76\1\77\1\100\1\101"+
    "\1\43\3\12\11\102\1\103\37\102\1\104\3\102\1\105"+
    "\41\102\117\12\2\106\1\107\1\106\1\107\7\106\1\110"+
    "\40\106\1\111\1\112\1\106\1\113\2\106\1\114\6\106"+
    "\1\115\2\106\1\116\2\106\1\117\1\120\1\106\1\121"+
    "\13\106\2\12\1\107\2\12\1\122\6\12\1\123\5\12"+
    "\1\124\16\12\7\125\1\12\1\126\2\12\1\125\1\12"+
    "\31\125\4\12\1\125\3\12\14\127\1\130\40\127\1\131"+
    "\41\127\1\12\2\13\1\12\2\13\1\14\1\15\1\16"+
    "\1\12\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\4\33\1\34\1\35"+
    "\1\36\1\37\1\132\1\41\1\42\7\43\1\44\1\45"+
    "\1\46\1\47\1\43\1\12\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\43\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\43\1\133\1\134\1\72"+
    "\1\43\1\73\1\74\1\135\1\43\1\136\1\137\1\140"+
    "\1\101\1\43\3\12\51\141\1\142\3\141\1\143\112\141"+
    "\1\142\3\141\1\144\41\141\154\0\1\145\61\0\7\146"+
    "\1\147\41\146\1\150\45\146\5\0\1\151\12\0\1\152"+
    "\111\0\1\153\130\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\31\43\4\0\1\43\41\0\1\155"+
    "\103\0\1\156\1\0\5\157\2\0\1\160\3\0\1\161"+
    "\75\0\1\162\4\0\1\163\115\0\1\164\16\0\1\165"+
    "\1\166\1\165\2\0\1\167\11\0\1\165\1\166\1\165"+
    "\21\0\1\167\34\0\1\164\1\0\5\33\10\0\1\165"+
    "\1\166\1\165\14\0\1\165\1\166\1\165\55\0\1\170"+
    "\11\0\1\171\1\172\116\0\1\173\1\174\115\0\1\175"+
    "\104\0\1\176\6\0\1\177\64\0\1\43\2\0\1\43"+
    "\1\0\34\43\7\0\6\43\24\0\1\200\4\0\5\43"+
    "\2\0\1\43\25\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\1\43\1\201\13\43\1\202\4\43"+
    "\1\203\6\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\1\204\15\43\1\205"+
    "\2\43\1\206\6\43\1\207\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\7\43"+
    "\1\210\3\43\1\211\2\43\1\212\12\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\4\43\1\213\3\43\1\214\5\43\1\215\12\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\13\43\1\216\1\43\1\217\2\43"+
    "\1\220\1\221\5\43\1\222\1\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\1\223\7\43\1\224\2\43\1\225\2\43\1\226\2\43"+
    "\1\227\2\43\1\230\4\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\1\231"+
    "\30\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\5\43\1\232\6\43\1\233"+
    "\1\234\4\43\1\235\6\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\16\43"+
    "\1\236\3\43\1\237\6\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\4\43"+
    "\1\240\24\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\4\43\1\241\3\43"+
    "\1\242\5\43\1\243\12\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\1\244"+
    "\30\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\4\43\1\245\17\43\1\246"+
    "\4\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\1\43\1\247\13\43\1\250"+
    "\3\43\1\251\2\43\1\252\4\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\1\253\20\43\1\254\2\43\1\255\4\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\4\43\1\256\11\43\1\257\12\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\4\43\1\260\11\43\1\261\4\43\1\262\5\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\1\263\20\43\1\264\6\43\1\265"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\1\266\30\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\1\267\6\43\1\270\6\43\1\271\12\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\14\43\1\272\14\43\4\0\1\43\113\0\1\273"+
    "\116\0\1\274\1\275\5\0\11\102\1\276\37\102\1\277"+
    "\3\102\1\0\52\102\1\300\37\102\1\277\3\102\1\0"+
    "\31\102\1\301\7\102\7\0\1\102\4\0\1\102\34\0"+
    "\1\102\3\0\1\102\1\0\1\102\3\0\1\102\7\0"+
    "\1\102\3\0\1\102\1\0\1\102\5\0\1\102\7\0"+
    "\2\106\1\0\1\106\1\0\7\106\1\110\40\106\1\0"+
    "\43\106\1\0\1\106\1\0\7\106\1\110\34\106\1\302"+
    "\3\106\1\0\43\106\1\0\1\106\1\0\7\106\1\110"+
    "\40\106\1\0\15\106\1\303\25\106\1\0\1\106\1\0"+
    "\7\106\1\110\40\106\1\0\16\106\1\304\24\106\1\0"+
    "\1\106\1\0\7\106\1\110\40\106\1\0\24\106\1\305"+
    "\16\106\1\0\1\106\1\0\7\106\1\110\40\106\1\0"+
    "\16\106\1\306\24\106\1\0\1\106\1\0\7\106\1\110"+
    "\40\106\1\0\1\307\42\106\1\0\1\106\1\0\7\106"+
    "\1\110\40\106\1\0\4\106\1\310\36\106\1\0\1\106"+
    "\1\0\7\106\1\110\40\106\1\0\30\106\1\311\12\106"+
    "\1\0\1\106\1\0\7\106\1\110\40\106\1\0\1\312"+
    "\40\106\5\0\1\313\14\0\1\124\121\0\5\125\7\0"+
    "\7\125\1\0\1\314\2\0\1\125\1\0\31\125\4\0"+
    "\1\125\10\0\1\124\111\0\1\125\2\0\1\125\1\0"+
    "\34\125\7\0\6\125\24\0\1\315\4\0\5\125\2\0"+
    "\1\125\14\127\1\130\40\127\1\0\55\127\1\130\34\127"+
    "\1\316\3\127\1\0\41\127\35\0\1\175\1\317\105\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\4\43\1\320\11\43\1\257\12\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\4\43\1\260\11\43\1\261\4\43\1\321\5\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\14\43\1\322\14\43\4\0\1\43\113\0"+
    "\1\323\116\0\1\274\1\324\5\0\51\141\1\325\3\141"+
    "\1\0\43\141\3\0\106\141\1\0\1\141\37\0\1\326"+
    "\61\0\7\146\1\327\41\146\1\150\45\146\10\0\1\330"+
    "\7\0\1\152\103\0\1\152\71\0\1\331\55\0\1\332"+
    "\103\0\1\333\10\0\1\334\107\0\5\157\10\0\1\165"+
    "\1\166\1\165\14\0\1\165\1\166\1\165\52\0\1\335"+
    "\77\0\2\163\1\0\114\163\25\0\5\157\105\0\1\336"+
    "\1\0\1\336\2\0\5\337\110\0\1\340\1\0\5\341"+
    "\7\0\4\341\11\0\6\341\70\0\1\342\170\0\1\343"+
    "\34\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\22\43\1\344\6\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\15\43"+
    "\1\345\12\43\1\346\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\2\43\1\347"+
    "\26\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\22\43\1\350\6\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\16\43\1\351\12\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\4\43\1\352\24\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\23\43\1\353"+
    "\5\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\4\43\1\354\24\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\1\355\7\43\1\356\20\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\13\43\1\357\1\360\1\361\13\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\2\43\1\362\17\43\1\363\6\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\22\43\1\364\6\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\22\43"+
    "\1\365\6\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\24\43\1\366\4\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\24\43\1\367\4\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\21\43\1\370\7\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\23\43"+
    "\1\371\5\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\10\43\1\372\2\43"+
    "\1\373\15\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\4\43\1\374\10\43"+
    "\1\375\13\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\16\43\1\376\5\43"+
    "\1\377\4\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\21\43\1\u0100\7\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\16\43\1\u0101\12\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\15\43\1\u0102\5\43\1\u0103\5\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\15\43\1\u0104\13\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\17\43"+
    "\1\u0105\11\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\23\43\1\u0106\5\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\16\43\1\u0107\12\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\10\43\1\u0108\20\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\16\43"+
    "\1\u0109\12\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\30\43\1\u010a\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\23\43\1\u010b\5\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\14\43\1\u010c\5\43\1\u010d\6\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\2\43\1\u010e\26\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\17\43\1\u010f"+
    "\3\43\1\u0110\5\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\25\43\1\u0111"+
    "\1\u0112\2\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\13\43\1\u0113\15\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\11\43\1\u0114\17\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\3\43\1\u0115\25\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\23\43"+
    "\1\u0116\5\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\15\43\1\u0117\3\43"+
    "\1\u0118\7\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\10\43\1\u0119\20\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\1\43\1\u011a\27\43\4\0\1\43"+
    "\4\0\5\u011b\17\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\u011c\1\u011d\1\43\1\u011e\11\43\1\u011f"+
    "\5\43\1\u0120\1\u0121\5\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\13\43"+
    "\1\u0122\15\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\13\43\1\u0123\5\43"+
    "\1\u0124\7\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\24\43\1\u0125\4\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\1\u0126\20\43\1\u0127\7\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\1\43\1\u0128\27\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\1\u0129\23\43\1\u012a\4\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\17\43"+
    "\1\u012b\11\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\21\43\1\u012c\7\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\10\43\1\u012d\20\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\4\43\1\u012e\3\43\1\u012f\20\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\21\43\1\u0130\7\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\13\43"+
    "\1\u0131\15\43\4\0\1\43\3\0\11\102\1\276\37\102"+
    "\1\277\3\102\1\0\31\102\1\0\7\102\2\106\1\0"+
    "\1\106\1\0\7\106\1\u0132\40\106\1\0\43\106\1\0"+
    "\1\106\1\0\7\106\1\110\40\106\1\0\15\106\1\u0133"+
    "\25\106\1\0\1\106\1\0\7\106\1\110\40\106\1\0"+
    "\15\106\1\u0134\25\106\1\0\1\106\1\0\7\106\1\110"+
    "\40\106\1\0\15\106\1\u0135\25\106\1\0\1\106\1\0"+
    "\7\106\1\110\40\106\1\0\3\106\1\u0136\37\106\1\0"+
    "\1\106\1\0\7\106\1\110\40\106\1\0\21\106\1\u0137"+
    "\21\106\1\0\1\106\1\0\7\106\1\110\40\106\1\0"+
    "\21\106\1\u0138\21\106\1\0\1\106\1\0\7\106\1\110"+
    "\40\106\1\0\17\106\1\u0139\23\106\1\0\1\106\1\0"+
    "\7\106\1\110\40\106\1\0\21\106\1\u013a\17\106\107\0"+
    "\1\u013b\7\0\14\127\1\u013c\40\127\1\0\41\127\36\0"+
    "\1\u013d\61\0\5\u013e\17\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\u013f\1\u011d\1\43\1\u011e\11\43"+
    "\1\u011f\5\43\1\u0120\1\u0121\5\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\1\u0126\20\43\1\u0140\7\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\13\43"+
    "\1\u0141\15\43\4\0\1\43\10\0\1\u0142\173\0\1\u0143"+
    "\60\0\1\u0144\117\0\5\337\112\0\5\337\10\0\1\165"+
    "\1\0\1\165\14\0\1\165\1\0\1\165\60\0\5\u0145"+
    "\7\0\4\u0145\11\0\6\u0145\56\0\1\340\1\0\5\341"+
    "\7\0\4\341\1\0\1\u0146\7\0\6\341\11\0\1\u0146"+
    "\46\0\5\u0147\7\0\4\u0147\11\0\6\u0147\60\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\23\43"+
    "\1\u0148\5\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\16\43\1\u0149\12\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\3\43\1\u014a\25\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\4\43\1\u014b\24\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\4\43"+
    "\1\u014c\24\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\13\43\1\u014d\15\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\1\u014e\30\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\4\43\1\u014f\24\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\2\43\1\u0150"+
    "\26\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\22\43\1\u0151\6\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\4\43\1\u0152\24\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\13\43\1\u0153\15\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\14\43\1\u0154"+
    "\14\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\5\43\1\u0155\14\43\1\u0156"+
    "\1\u0157\5\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\10\43\1\u0158\20\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\2\43\1\u0159\26\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\23\43\1\u015a\5\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\4\43"+
    "\1\u015b\24\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\14\43\1\u015c\14\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\1\u015d\30\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\16\43\1\u015e\12\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\4\43\1\u015f"+
    "\24\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\13\43\1\u0160\15\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\22\43\1\u0161\6\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\13\43\1\u0162\15\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\1\u0163\30\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\1\u0164\30\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\22\43\1\u0165\6\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\4\43\1\u0166"+
    "\5\43\1\u0167\16\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\14\43\1\u0168"+
    "\14\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\2\43\1\u0169\26\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\24\43\1\u016a\4\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\3\43\1\u016b\25\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\16\43\1\u016c"+
    "\12\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\13\43\1\u016d\15\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\15\43\1\u016e\13\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\15\43\1\u016f\13\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\10\43\1\u0170"+
    "\20\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\23\43\1\u0171\5\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\12\43\1\u0172\16\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\2\43\1\u0173\26\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\4\43\1\u0174"+
    "\24\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\13\43\1\u0175\15\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\4\43\1\u0176\24\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\4\43\1\u0177\24\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\4\43\1\u0178"+
    "\24\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\10\43\1\u0179\20\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\1\u017a\30\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\25\43"+
    "\1\u017b\3\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\13\43\1\u017c\15\43"+
    "\4\0\1\43\4\0\5\u011b\47\0\1\u011c\66\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\3\43"+
    "\1\u017d\25\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\16\43\1\u017e\12\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\16\43\1\u017f\12\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\16\43\1\u0180\12\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\21\43"+
    "\1\u0181\2\43\1\u0182\4\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\13\43"+
    "\1\u0183\15\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\4\43\1\u0184\24\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\25\43\1\u0185\3\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\21\43\1\u0186\7\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\21\43"+
    "\1\u0187\7\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\4\43\1\u0188\3\43"+
    "\1\u0189\20\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\13\43\1\u018a\15\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\15\43\1\u018b\1\43\1\u018c\11\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\4\43\1\u018d\24\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\4\43\1\u018e\24\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\23\43"+
    "\1\u018f\5\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\21\43\1\u0190\7\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\13\43\1\u0191\15\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\12\43\1\u0192\16\43\4\0\1\43\4\0\5\u011b"+
    "\17\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\u011c\15\43\1\u0193\13\43\4\0\1\43\3\0\2\106"+
    "\1\0\1\106\1\0\7\106\1\110\34\106\1\302\47\106"+
    "\1\0\1\106\1\0\7\106\1\110\40\106\1\0\16\106"+
    "\1\u0194\24\106\1\0\1\106\1\0\7\106\1\110\40\106"+
    "\1\0\22\106\1\u0195\20\106\1\0\1\106\1\0\7\106"+
    "\1\110\40\106\1\0\2\106\1\u0196\40\106\1\0\1\106"+
    "\1\0\7\106\1\110\40\106\1\0\24\106\1\u0197\16\106"+
    "\1\0\1\106\1\0\7\106\1\110\40\106\1\0\1\u0198"+
    "\42\106\1\0\1\106\1\0\7\106\1\110\40\106\1\0"+
    "\25\106\1\u0199\15\106\1\0\1\106\1\0\7\106\1\110"+
    "\40\106\1\0\4\106\1\u019a\36\106\1\0\1\106\1\0"+
    "\1\u019b\6\106\1\110\40\106\1\0\10\106\1\u019c\30\106"+
    "\25\0\5\u019d\7\0\4\u019d\11\0\6\u019d\33\0\14\127"+
    "\1\130\34\127\1\316\45\127\1\0\5\u013e\47\0\1\u013f"+
    "\66\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\4\43\1\u0188\3\43\1\u019e\20\43\4\0\1\43"+
    "\4\0\5\u013e\17\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\u013f\15\43\1\u0193\13\43\4\0\1\43"+
    "\45\0\1\u019f\155\0\1\u01a0\51\0\1\u01a1\107\0\5\u0145"+
    "\7\0\4\u0145\1\0\1\u0146\7\0\6\u0145\11\0\1\u0146"+
    "\41\0\1\u01a2\1\0\1\u01a2\2\0\5\u01a3\112\0\5\u0147"+
    "\7\0\4\u0147\11\0\6\u0147\25\0\1\43\32\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\21\43"+
    "\1\u01a4\7\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\23\43\1\u01a5\5\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\1\u01a6\30\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\15\43\1\u01a7\13\43\4\0\1\43\30\0\1\43\1\u01a8"+
    "\2\43\1\u01a9\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\31\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\4\43\1\u01aa\24\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\12\43\1\u01ab\16\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\12\43\1\u01ac\16\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\22\43"+
    "\1\u01ad\6\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\15\43\1\u01ae\13\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\4\43\1\u01af\24\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\10\43\1\u01b0\20\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\10\43"+
    "\1\u01b1\2\43\1\u01b2\15\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\23\43"+
    "\1\u01b3\5\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\10\43\1\u01b4\20\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\14\43\1\u01b5\14\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\4\43\1\u01b6\24\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\10\43"+
    "\1\u01b7\20\43\4\0\1\43\10\0\1\u01b8\17\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\31\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\13\43\1\u01b9\15\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\21\43\1\u01ba\7\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\21\43"+
    "\1\u01bb\7\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\4\43\1\u01bc\24\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\3\43\1\u01bd\25\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\13\43\1\u01be\15\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\23\43"+
    "\1\u01bf\5\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\7\43\1\u01c0\21\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\1\u01c1\30\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\23\43\1\u01c2\5\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\21\43\1\u01c3"+
    "\7\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\13\43\1\u01c4\15\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\21\43\1\u01c5\7\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\1\u01c6\30\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\23\43\1\u01c7\5\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\4\43\1\u01c8\24\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\7\43\1\u01c9\21\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\21\43"+
    "\1\u01ca\7\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\2\43\1\u01cb\26\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\21\43\1\u01cc\7\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\21\43\1\u01cd\7\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\2\43"+
    "\1\u01ce\26\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\14\43\1\u01cf\14\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\1\u01d0\30\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\10\43\1\u01d1\20\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\16\43\1\u01d2"+
    "\12\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\21\43\1\u01d3\7\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\23\43\1\u01d4\5\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\24\43\1\u01d5\4\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\30\43\1\u01d6"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\21\43\1\u01d7\7\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\1\43\1\u01d8\27\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\2\43"+
    "\1\u01d9\26\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\10\43\1\u01da\20\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\2\43\1\u01db\26\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\23\43\1\u01dc\5\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\1\u01dd"+
    "\30\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\15\43\1\u01de\13\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\4\43\1\u01df\24\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\22\43\1\u01e0\6\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\3\43\1\u01e1"+
    "\12\43\1\u01e2\12\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\4\43\1\u01e3"+
    "\24\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\4\43\1\u01e4\24\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\4\43\1\u01e5\24\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\22\43\1\u01e6\6\43\4\0\1\43\3\0\2\106\1\0"+
    "\1\106\1\0\7\106\1\110\40\106\1\0\23\106\1\u01e7"+
    "\17\106\1\0\1\106\1\0\7\106\1\110\40\106\1\0"+
    "\23\106\1\u01e8\17\106\1\0\1\106\1\0\7\106\1\110"+
    "\40\106\1\0\23\106\1\u01e9\17\106\1\0\1\106\1\0"+
    "\7\106\1\110\40\106\1\0\13\106\1\u01ea\27\106\1\0"+
    "\1\106\1\0\7\106\1\110\40\106\1\0\14\106\1\u01eb"+
    "\26\106\1\0\1\106\1\0\7\106\1\110\40\106\1\0"+
    "\10\106\1\u01ec\32\106\1\0\1\106\1\0\1\u01ed\6\106"+
    "\1\110\40\106\1\0\43\106\1\0\1\106\1\0\1\u019b"+
    "\6\106\1\110\40\106\1\u01ee\43\106\1\0\1\106\1\0"+
    "\7\106\1\110\40\106\1\0\1\u01ef\40\106\25\0\5\u019d"+
    "\7\0\4\u019d\11\0\6\u019d\25\0\1\125\32\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\15\43"+
    "\1\u01f0\13\43\4\0\1\43\65\0\1\u01f1\136\0\1\u01f2"+
    "\41\0\5\u01a3\112\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\1\u01f3\30\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\1\u01f4\30\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\23\43\1\u01f5\5\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\3\43\1\u01f6\25\43\4\0\1\43"+
    "\30\0\4\43\1\u01f7\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\31\43\4\0\1\43\30\0\3\43\1\u01f8"+
    "\1\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\31\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\1\u01f9\30\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\17\43\1\u01fa\11\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\23\43"+
    "\1\u01fb\5\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\2\43\1\u01fc\26\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\23\43\1\u01fd\5\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\6\43\1\u01fe\22\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\10\43"+
    "\1\u01ff\20\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\15\43\1\u0200\13\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\1\u0201\30\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\15\43\1\u0202\13\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\15\43\1\u0203"+
    "\13\43\4\0\1\43\71\0\1\u0204\55\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\22\43\1\u0205"+
    "\6\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\15\43\1\u0206\13\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\2\43\1\u0207\26\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\10\43\1\u0208\20\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\4\43\1\u0209"+
    "\24\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\4\43\1\u020a\24\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\23\43\1\u020b\5\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\23\43\1\u020c\5\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\15\43\1\u020d"+
    "\13\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\23\43\1\u020e\5\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\4\43\1\u020f\24\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\23\43\1\u0210\5\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\2\43\1\u0211"+
    "\26\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\15\43\1\u0212\13\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\3\43\1\u0213\25\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\4\43\1\u0214\24\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\21\43\1\u0215"+
    "\7\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\15\43\1\u0216\13\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\1\u0217\30\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\23\43"+
    "\1\u0218\5\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\2\43\1\u0219\26\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\4\43\1\u021a\24\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\14\43\1\u021b\14\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\6\43"+
    "\1\u021c\22\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\1\u021d\30\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\4\43\1\u021e\24\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\5\43\1\u021f\23\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\21\43\1\u0220"+
    "\7\43\4\0\1\43\3\0\2\106\1\0\1\106\1\0"+
    "\7\106\1\110\40\106\1\0\1\u0221\42\106\1\0\1\106"+
    "\1\0\1\u0222\6\106\1\110\40\106\1\0\43\106\1\0"+
    "\1\106\1\0\7\106\1\110\40\106\1\0\10\106\1\u0223"+
    "\32\106\1\0\1\106\1\0\7\106\1\110\40\106\1\0"+
    "\4\106\1\u0224\36\106\1\0\1\106\1\0\7\106\1\110"+
    "\40\106\1\0\4\106\1\u0225\36\106\1\0\1\106\1\0"+
    "\7\106\1\110\40\106\1\0\2\106\1\u0226\40\106\1\0"+
    "\1\106\1\0\1\u01ed\6\106\1\110\40\106\1\u0227\43\106"+
    "\1\0\1\106\1\0\7\106\1\110\40\106\1\0\1\106"+
    "\1\u0228\37\106\25\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\6\43\1\u0229\22\43\4\0\1\43"+
    "\100\0\1\u022a\120\0\1\u022b\44\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\2\43\1\u022c\26\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\23\43\1\u022d\5\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\1\u022e\30\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\10\43\1\u022f"+
    "\20\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\15\43\1\u0230\13\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\1\u0231\30\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\23\43"+
    "\1\u0232\5\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\24\43\1\u0233\4\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\2\43\1\u0234\26\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\24\43\1\u0235\4\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\13\43"+
    "\1\u0236\15\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\3\43\1\u0237\25\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\2\43\1\u0238\26\43\4\0\1\43"+
    "\66\0\1\u0239\60\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\1\u023a\30\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\7\43\1\u023b\21\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\16\43\1\u023c"+
    "\12\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\4\43\1\u023d\24\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\4\43\1\u023e\24\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\23\43\1\u023f\5\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\4\43\1\u0240"+
    "\24\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\13\43\1\u0241\15\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\2\43\1\u0242\26\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\22\43\1\u0243\6\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\2\43\1\u0244"+
    "\26\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\4\43\1\u0245\24\43\4\0"+
    "\1\43\4\0\5\u0246\17\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\50\31\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\2\43\1\u0247\26\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\22\43\1\u0248"+
    "\6\43\4\0\1\43\3\0\2\106\1\0\1\106\1\0"+
    "\7\106\1\110\40\106\1\0\23\106\1\u0249\17\106\1\0"+
    "\1\106\1\0\1\u0222\6\106\1\110\40\106\1\u024a\43\106"+
    "\1\0\1\106\1\0\7\106\1\110\40\106\1\0\16\106"+
    "\1\u024b\24\106\1\0\1\106\1\0\1\u024c\6\106\1\110"+
    "\40\106\1\0\43\106\1\0\1\106\1\0\7\106\1\110"+
    "\40\106\1\0\23\106\1\u024d\17\106\1\0\1\106\1\0"+
    "\7\106\1\110\40\106\1\0\4\106\1\u024e\36\106\1\0"+
    "\1\106\1\0\7\106\1\110\40\106\1\0\13\106\1\u024f"+
    "\25\106\77\0\1\u0250\112\0\1\u0251\50\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\23\43\1\u0252"+
    "\5\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\10\43\1\u0253\20\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\15\43\1\u0254\13\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\15\43\1\u0255\13\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\21\43\1\u0256"+
    "\7\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\23\43\1\u0257\5\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\4\43\1\u0258\24\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\10\43\1\u0259\20\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\23\43\1\u025a"+
    "\5\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\13\43\1\u025b\15\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\15\43\1\u025c\13\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\3\43\1\u025d\25\43\4\0\1\43\30\0\5\43\7\0"+
    "\7\43\1\0\1\154\2\0\1\43\1\0\21\43\1\u025e"+
    "\7\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\4\43\1\u025f\24\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\30\43\1\u0260\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\4\43"+
    "\1\u0261\24\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\12\43\1\u0262\16\43"+
    "\4\0\1\43\4\0\5\u0246\47\0\1\50\66\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\23\43"+
    "\1\u0263\5\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\2\43\1\u0264\26\43"+
    "\4\0\1\43\3\0\2\106\1\0\1\106\1\0\7\106"+
    "\1\110\40\106\1\0\10\106\1\u0265\32\106\1\0\1\106"+
    "\1\0\7\106\1\110\40\106\1\0\15\106\1\u0266\25\106"+
    "\1\0\1\106\1\0\1\u024c\6\106\1\110\40\106\1\u0267"+
    "\43\106\1\0\1\106\1\0\7\106\1\110\40\106\1\0"+
    "\4\106\1\u0268\36\106\1\0\1\106\1\0\1\u0269\6\106"+
    "\1\110\40\106\1\0\43\106\1\0\1\106\1\0\7\106"+
    "\1\110\40\106\1\0\4\106\1\u026a\34\106\62\0\1\u026b"+
    "\41\0\1\u0251\14\0\1\u026c\121\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\16\43\1\u026d\12\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\6\43\1\u026e\22\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\10\43\1\u026f\20\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\1\u0270"+
    "\30\43\4\0\1\43\30\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\15\43\1\u0271\13\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\21\43\1\u0272\7\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\10\43\1\u0273\20\43\4\0\1\43\3\0\2\106\1\0"+
    "\1\106\1\0\7\106\1\110\40\106\1\0\16\106\1\u0274"+
    "\24\106\1\0\1\106\1\0\1\u0275\6\106\1\110\40\106"+
    "\1\0\43\106\1\0\1\106\1\0\7\106\1\110\40\106"+
    "\1\0\21\106\1\u0276\21\106\1\0\1\106\1\0\1\u0269"+
    "\6\106\1\110\40\106\1\u0277\43\106\1\0\1\106\1\0"+
    "\1\u0278\6\106\1\110\40\106\1\0\41\106\60\0\1\u0279"+
    "\43\0\1\u026c\136\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\15\43\1\u027a\13\43\4\0\1\43"+
    "\30\0\5\43\7\0\7\43\1\0\1\154\2\0\1\43"+
    "\1\0\2\43\1\u027b\26\43\4\0\1\43\30\0\5\43"+
    "\7\0\7\43\1\0\1\154\2\0\1\43\1\0\1\43"+
    "\1\u027c\27\43\4\0\1\43\30\0\5\43\7\0\7\43"+
    "\1\0\1\154\2\0\1\43\1\0\6\43\1\u027d\22\43"+
    "\4\0\1\43\30\0\5\43\7\0\7\43\1\0\1\154"+
    "\2\0\1\43\1\0\16\43\1\u027e\12\43\4\0\1\43"+
    "\3\0\2\106\1\0\1\106\1\0\7\106\1\110\40\106"+
    "\1\0\15\106\1\u027f\25\106\1\0\1\106\1\0\1\u0275"+
    "\6\106\1\110\40\106\1\u0280\43\106\1\0\1\106\1\0"+
    "\1\u0281\6\106\1\110\40\106\1\0\43\106\1\0\1\106"+
    "\1\0\1\u0278\6\106\1\110\40\106\1\u0282\41\106\56\0"+
    "\1\u0283\65\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\13\43\1\u0284\15\43\4\0\1\43\30\0"+
    "\5\43\7\0\7\43\1\0\1\154\2\0\1\43\1\0"+
    "\15\43\1\u0285\13\43\4\0\1\43\3\0\2\106\1\0"+
    "\1\106\1\0\1\u0286\6\106\1\110\40\106\1\0\43\106"+
    "\1\0\1\106\1\0\1\u0281\6\106\1\110\40\106\1\u0287"+
    "\41\106\101\0\1\u0288\42\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\4\43\1\u0289\24\43\4\0"+
    "\1\43\30\0\5\43\7\0\7\43\1\0\1\154\2\0"+
    "\1\43\1\0\1\u028a\30\43\4\0\1\43\3\0\2\106"+
    "\1\0\1\106\1\0\1\u0286\6\106\1\110\40\106\1\u028b"+
    "\41\106\62\0\1\u028c\61\0\5\43\7\0\7\43\1\0"+
    "\1\154\2\0\1\43\1\0\13\43\1\u028d\15\43\4\0"+
    "\1\43\64\0\1\u028e\42\0\1\u028f\116\0\1\u0290\67\0"+
    "\1\u0291\26\0\1\u0290\167\0\1\u0292\137\0\1\u0293\75\0"+
    "\1\u0294\132\0\1\u0295\106\0\1\u0296\135\0\1\u0297\77\0"+
    "\1\u0298\133\0\1\u0299\117\0\1\u029a\23\0\1\u029a\111\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[40132];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\2\11\3\1\1\11\2\1\5\11\5\1\2\11"+
    "\4\1\1\11\1\1\1\11\1\1\3\11\27\1\2\11"+
    "\3\1\1\11\1\1\1\11\1\1\1\11\17\1\1\11"+
    "\6\1\1\11\2\1\2\11\1\1\1\0\1\11\1\0"+
    "\2\1\1\11\1\0\1\1\1\0\1\1\2\11\2\1"+
    "\1\0\1\11\2\0\3\11\1\1\4\11\1\0\72\1"+
    "\3\11\3\0\1\11\11\1\3\0\5\1\2\11\1\0"+
    "\1\11\1\1\2\0\3\11\2\0\1\1\1\0\1\1"+
    "\1\11\1\0\67\1\1\0\1\11\36\1\1\0\1\1"+
    "\1\11\1\0\1\11\2\1\3\0\1\1\2\0\125\1"+
    "\1\0\1\1\2\0\1\11\1\0\25\1\1\0\65\1"+
    "\1\11\2\1\2\0\21\1\1\0\42\1\1\11\2\1"+
    "\2\0\15\1\1\11\14\1\1\0\3\1\1\11\5\1"+
    "\2\0\25\1\1\11\3\1\1\0\13\1\1\11\1\1"+
    "\1\0\6\1\1\11\1\1\1\11\1\0\3\1\1\11"+
    "\1\0\2\1\1\11\1\0\4\1\11\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[666];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private boolean inTopLevelDefinition = false;
    private int braceCount = 0;
    private boolean rightBraceFound = true;

    private boolean inTopLevelDefinitionPipe = false;
    private int bracePipeCount = 0;
    private boolean rightBracePipeFound = true;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  BallerinaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BallerinaTypes.INVALID_TOKEN;
            }
          // fall through
          case 192: break;
          case 2:
            { return BallerinaTypes.WHITESPACE_MINUTIAE;
            }
          // fall through
          case 193: break;
          case 3:
            { return BallerinaTypes.EXCLAMATION_MARK_TOKEN;
            }
          // fall through
          case 194: break;
          case 4:
            { yybegin(MARKDOWN_DOCUMENTATION_MODE); return BallerinaTypes.MARKDOWN_DOCUMENTATION_LINE_START;
            }
          // fall through
          case 195: break;
          case 5:
            { return BallerinaTypes.PERCENT_TOKEN;
            }
          // fall through
          case 196: break;
          case 6:
            { return BallerinaTypes.BITWISE_AND_TOKEN;
            }
          // fall through
          case 197: break;
          case 7:
            { return BallerinaTypes.OPEN_PAREN_TOKEN;
            }
          // fall through
          case 198: break;
          case 8:
            { return BallerinaTypes.CLOSE_PAREN_TOKEN;
            }
          // fall through
          case 199: break;
          case 9:
            { return BallerinaTypes.ASTERISK_TOKEN;
            }
          // fall through
          case 200: break;
          case 10:
            { return BallerinaTypes.PLUS_TOKEN;
            }
          // fall through
          case 201: break;
          case 11:
            { return BallerinaTypes.COMMA_TOKEN;
            }
          // fall through
          case 202: break;
          case 12:
            { return BallerinaTypes.MINUS_TOKEN;
            }
          // fall through
          case 203: break;
          case 13:
            { return BallerinaTypes.DOT_TOKEN;
            }
          // fall through
          case 204: break;
          case 14:
            { return BallerinaTypes.SLASH_TOKEN;
            }
          // fall through
          case 205: break;
          case 15:
            { return BallerinaTypes.DECIMAL_INTEGER_LITERAL_TOKEN;
            }
          // fall through
          case 206: break;
          case 16:
            { return BallerinaTypes.COLON_TOKEN;
            }
          // fall through
          case 207: break;
          case 17:
            { return BallerinaTypes.SEMICOLON_TOKEN;
            }
          // fall through
          case 208: break;
          case 18:
            { return BallerinaTypes.LT_TOKEN;
            }
          // fall through
          case 209: break;
          case 19:
            { return BallerinaTypes.EQUAL_TOKEN;
            }
          // fall through
          case 210: break;
          case 20:
            { return BallerinaTypes.GT_TOKEN;
            }
          // fall through
          case 211: break;
          case 21:
            { return BallerinaTypes.QUESTION_MARK_TOKEN;
            }
          // fall through
          case 212: break;
          case 22:
            { return BallerinaTypes.AT_TOKEN;
            }
          // fall through
          case 213: break;
          case 23:
            { return BallerinaTypes.IDENTIFIER_TOKEN;
            }
          // fall through
          case 214: break;
          case 24:
            { return BallerinaTypes.OPEN_BRACKET_TOKEN;
            }
          // fall through
          case 215: break;
          case 25:
            { return BallerinaTypes.CLOSE_BRACKET_TOKEN;
            }
          // fall through
          case 216: break;
          case 26:
            { return BallerinaTypes.BITWISE_XOR_TOKEN;
            }
          // fall through
          case 217: break;
          case 27:
            { yybegin(TEMPLATE_MODE);
                                                                    return BallerinaTypes.STRING_TEMPLATE_START_TOKEN;
            }
          // fall through
          case 218: break;
          case 28:
            { if (inTopLevelDefinition) {
                                         braceCount++;
                                         if (braceCount==2) {
                                             return BallerinaTypes.OPEN_NESTED_BRACE_TOKEN;
                                         }
                                         return BallerinaTypes.IGNORED_OPEN_BRACE_TOKEN;
                                         } else {
                                             inTopLevelDefinition = true;
                                             braceCount++;
                                             return BallerinaTypes.OPEN_BRACE_TOKEN;
                                        }
            }
          // fall through
          case 219: break;
          case 29:
            { return BallerinaTypes.PIPE_TOKEN;
            }
          // fall through
          case 220: break;
          case 30:
            { braceCount--;
                                            if (braceCount==1) {
                                                return BallerinaTypes.CLOSE_NESTED_BRACE_TOKEN;
                                            } else if (braceCount <= 0) {
                                                inTopLevelDefinition = false;
                                                return BallerinaTypes.CLOSE_BRACE_TOKEN;
                                            }

                                            return BallerinaTypes.IGNORED_CLOSE_BRACE_TOKEN;
            }
          // fall through
          case 221: break;
          case 31:
            { return BallerinaTypes.NEGATION_TOKEN;
            }
          // fall through
          case 222: break;
          case 32:
            { return BallerinaTypes.TEMPLATE_STRING;
            }
          // fall through
          case 223: break;
          case 33:
            { yybegin(YYINITIAL); return BallerinaTypes.INVALID_TOKEN;
            }
          // fall through
          case 224: break;
          case 34:
            { yybegin(YYINITIAL);
                                                                return BallerinaTypes.STRING_TEMPLATE_END_TOKEN;
            }
          // fall through
          case 225: break;
          case 35:
            { return BallerinaTypes.MARKDOWN_DOCUMENTATION_TEXT;
            }
          // fall through
          case 226: break;
          case 36:
            { yybegin(YYINITIAL);
            }
          // fall through
          case 227: break;
          case 37:
            { yybegin(SINGLE_BACKTICKED_MARKDOWN_MODE); return BallerinaTypes.SINGLE_BACKTICK_MARKDOWN_START;
            }
          // fall through
          case 228: break;
          case 38:
            { yybegin(MARKDOWN_DOCUMENTATION_MODE); return BallerinaTypes.DESCRIPTION_SEPARATOR;
            }
          // fall through
          case 229: break;
          case 39:
            { return BallerinaTypes.PARAMETER_NAME;
            }
          // fall through
          case 230: break;
          case 40:
            { return BallerinaTypes.SINGLE_BACKTICK_CONTENT;
            }
          // fall through
          case 231: break;
          case 41:
            { yybegin(MARKDOWN_DOCUMENTATION_MODE); return BallerinaTypes.SINGLE_BACKTICK_MARKDOWN_END;
            }
          // fall through
          case 232: break;
          case 42:
            { yybegin(TEMPLATE_MODE);
                                                  return BallerinaTypes.INTERPOLATION_END_TOKEN;
            }
          // fall through
          case 233: break;
          case 43:
            { yybegin(YYINITIAL); return BallerinaTypes.STRING_TEMPLATE_END_TOKEN;
            }
          // fall through
          case 234: break;
          case 44:
            { yybegin(TEST); return BallerinaTypes.STRING_TEMPLATE_END_TOKEN;
            }
          // fall through
          case 235: break;
          case 45:
            { return BallerinaTypes.NOT_EQUAL_TOKEN;
            }
          // fall through
          case 236: break;
          case 46:
            { return BallerinaTypes.STRING_LITERAL_TOKEN;
            }
          // fall through
          case 237: break;
          case 47:
            { yybegin(MARKDOWN_PARAMETER_DOCUMENTATION_MODE); return BallerinaTypes.PARAMETER_DOCUMENTATION_START;
            }
          // fall through
          case 238: break;
          case 48:
            { return BallerinaTypes.LOGICAL_AND_TOKEN;
            }
          // fall through
          case 239: break;
          case 49:
            { return BallerinaTypes.RIGHT_ARROW_TOKEN;
            }
          // fall through
          case 240: break;
          case 50:
            { return BallerinaTypes.DECIMAL_FLOATING_POINT_LITERAL_TOKEN;
            }
          // fall through
          case 241: break;
          case 51:
            { return BallerinaTypes.DOT_LT_TOKEN;
            }
          // fall through
          case 242: break;
          case 52:
            { return BallerinaTypes.ANNOT_CHAINING_TOKEN;
            }
          // fall through
          case 243: break;
          case 53:
            { return BallerinaTypes.SLASH_ASTERISK_TOKEN;
            }
          // fall through
          case 244: break;
          case 54:
            { return BallerinaTypes.COMMENT_MINUTIAE;
            }
          // fall through
          case 245: break;
          case 55:
            { return BallerinaTypes.LEFT_ARROW_TOKEN;
            }
          // fall through
          case 246: break;
          case 56:
            { return BallerinaTypes.DOUBLE_LT_TOKEN;
            }
          // fall through
          case 247: break;
          case 57:
            { return BallerinaTypes.LT_EQUAL_TOKEN;
            }
          // fall through
          case 248: break;
          case 58:
            { return BallerinaTypes.DOUBLE_EQUAL_TOKEN;
            }
          // fall through
          case 249: break;
          case 59:
            { return BallerinaTypes.RIGHT_DOUBLE_ARROW_TOKEN;
            }
          // fall through
          case 250: break;
          case 60:
            { return BallerinaTypes.GT_EQUAL_TOKEN;
            }
          // fall through
          case 251: break;
          case 61:
            { return BallerinaTypes.OPTIONAL_CHAINING_TOKEN;
            }
          // fall through
          case 252: break;
          case 62:
            { return BallerinaTypes.ELVIS_TOKEN;
            }
          // fall through
          case 253: break;
          case 63:
            { return BallerinaTypes.AS_KEYWORD;
            }
          // fall through
          case 254: break;
          case 64:
            { return BallerinaTypes.BY_KEYWORD;
            }
          // fall through
          case 255: break;
          case 65:
            { return BallerinaTypes.DO_KEYWORD;
            }
          // fall through
          case 256: break;
          case 66:
            { return BallerinaTypes.IF_KEYWORD;
            }
          // fall through
          case 257: break;
          case 67:
            { return BallerinaTypes.IN_KEYWORD;
            }
          // fall through
          case 258: break;
          case 68:
            { return BallerinaTypes.IS_KEYWORD;
            }
          // fall through
          case 259: break;
          case 69:
            { return BallerinaTypes.ON_KEYWORD;
            }
          // fall through
          case 260: break;
          case 70:
            { if (inTopLevelDefinitionPipe) {
                                        bracePipeCount++;
                                        if (bracePipeCount==2) {
                                            return BallerinaTypes.OPEN_NESTED_BRACE_PIPE_TOKEN;
                                        }
                                        return BallerinaTypes.IGNORED_OPEN_BRACE_PIPE_TOKEN;
                                        } else {
                                            inTopLevelDefinitionPipe = true;
                                            bracePipeCount++;
                                            return BallerinaTypes.OPEN_BRACE_PIPE_TOKEN;
                                       }
            }
          // fall through
          case 261: break;
          case 71:
            { return BallerinaTypes.LOGICAL_OR_TOKEN;
            }
          // fall through
          case 262: break;
          case 72:
            { bracePipeCount--;
                                       if (bracePipeCount==1) {
                                           return BallerinaTypes.CLOSE_NESTED_BRACE_PIPE_TOKEN;
                                       } else if (bracePipeCount <= 0) {
                                           inTopLevelDefinitionPipe = false;
                                           return BallerinaTypes.CLOSE_BRACE_PIPE_TOKEN;
                                       }

                                       return BallerinaTypes.IGNORED_CLOSE_BRACE_PIPE_TOKEN;
            }
          // fall through
          case 263: break;
          case 73:
            { yybegin(TEST); return BallerinaTypes.INTERPOLATION_START_TOKEN;
            }
          // fall through
          case 264: break;
          case 74:
            { return BallerinaTypes.DOUBLE_GT_TOKEN;
            }
          // fall through
          case 265: break;
          case 75:
            { if (inTopLevelDefinitionPipe) {
                                                  bracePipeCount++;
                                                  if (bracePipeCount==2) {
                                                      return BallerinaTypes.OPEN_NESTED_BRACE_PIPE_TOKEN;
                                                  }
                                                  return BallerinaTypes.IGNORED_OPEN_BRACE_PIPE_TOKEN;
                                                  } else {
                                                      inTopLevelDefinitionPipe = true;
                                                      bracePipeCount++;
                                                      return BallerinaTypes.OPEN_BRACE_PIPE_TOKEN;
                                                 }
            }
          // fall through
          case 266: break;
          case 76:
            { bracePipeCount--;
                                                 if (bracePipeCount==1) {
                                                     return BallerinaTypes.CLOSE_NESTED_BRACE_PIPE_TOKEN;
                                                 } else if (bracePipeCount <= 0) {
                                                     inTopLevelDefinitionPipe = false;
                                                     return BallerinaTypes.CLOSE_BRACE_PIPE_TOKEN;
                                                 }

                                                 return BallerinaTypes.IGNORED_CLOSE_BRACE_PIPE_TOKEN;
            }
          // fall through
          case 267: break;
          case 77:
            { return BallerinaTypes.NOT_DOUBLE_EQUAL_TOKEN;
            }
          // fall through
          case 268: break;
          case 78:
            { return BallerinaTypes.SYNC_SEND_TOKEN;
            }
          // fall through
          case 269: break;
          case 79:
            { return BallerinaTypes.ELLIPSIS_TOKEN;
            }
          // fall through
          case 270: break;
          case 80:
            { return BallerinaTypes.DOUBLE_DOT_LT_TOKEN;
            }
          // fall through
          case 271: break;
          case 81:
            { return BallerinaTypes.HEX_INTEGER_LITERAL_TOKEN;
            }
          // fall through
          case 272: break;
          case 82:
            { return BallerinaTypes.TRIPPLE_EQUAL_TOKEN;
            }
          // fall through
          case 273: break;
          case 83:
            { return BallerinaTypes.ANY_KEYWORD;
            }
          // fall through
          case 274: break;
          case 84:
            { return BallerinaTypes.INT_KEYWORD;
            }
          // fall through
          case 275: break;
          case 85:
            { return BallerinaTypes.KEY_KEYWORD;
            }
          // fall through
          case 276: break;
          case 86:
            { return BallerinaTypes.LET_KEYWORD;
            }
          // fall through
          case 277: break;
          case 87:
            { return BallerinaTypes.MAP_KEYWORD;
            }
          // fall through
          case 278: break;
          case 88:
            { return BallerinaTypes.NEW_KEYWORD;
            }
          // fall through
          case 279: break;
          case 89:
            { yybegin(BACKTICK_MODE); return BallerinaTypes.STRING_TEMPLATE_START_TOKEN;
            }
          // fall through
          case 280: break;
          case 90:
            { return BallerinaTypes.VAR_KEYWORD;
            }
          // fall through
          case 281: break;
          case 91:
            { return BallerinaTypes.XML_KEYWORD;
            }
          // fall through
          case 282: break;
          case 92:
            { return BallerinaTypes.TRIPPLE_GT_TOKEN;
            }
          // fall through
          case 283: break;
          case 93:
            { yybegin(EXPR_BACKTICK_MODE); return BallerinaTypes.STRING_TEMPLATE_START_TOKEN;
            }
          // fall through
          case 284: break;
          case 94:
            { return BallerinaTypes.HEX_FLOATING_POINT_LITERAL_TOKEN;
            }
          // fall through
          case 285: break;
          case 95:
            { return BallerinaTypes.BYTE_KEYWORD;
            }
          // fall through
          case 286: break;
          case 96:
            { return BallerinaTypes.ELSE_KEYWORD;
            }
          // fall through
          case 287: break;
          case 97:
            { return BallerinaTypes.ENUM_KEYWORD;
            }
          // fall through
          case 288: break;
          case 98:
            { return BallerinaTypes.FAIL_KEYWORD;
            }
          // fall through
          case 289: break;
          case 99:
            { return BallerinaTypes.FORK_KEYWORD;
            }
          // fall through
          case 290: break;
          case 100:
            { return BallerinaTypes.FROM_KEYWORD;
            }
          // fall through
          case 291: break;
          case 101:
            { return BallerinaTypes.JOIN_KEYWORD;
            }
          // fall through
          case 292: break;
          case 102:
            { return BallerinaTypes.JSON_KEYWORD;
            }
          // fall through
          case 293: break;
          case 103:
            { return BallerinaTypes.LOCK_KEYWORD;
            }
          // fall through
          case 294: break;
          case 104:
            { return BallerinaTypes.NULL_KEYWORD;
            }
          // fall through
          case 295: break;
          case 105:
            { return BallerinaTypes.TRAP_KEYWORD;
            }
          // fall through
          case 296: break;
          case 106:
            { return BallerinaTypes.TRUE_KEYWORD;
            }
          // fall through
          case 297: break;
          case 107:
            { return BallerinaTypes.TYPE_KEYWORD;
            }
          // fall through
          case 298: break;
          case 108:
            { return BallerinaTypes.WAIT_KEYWORD;
            }
          // fall through
          case 299: break;
          case 109:
            { return BallerinaTypes.DOUBLE_SLASH_DOUBLE_ASTERISK_LT_TOKEN;
            }
          // fall through
          case 300: break;
          case 110:
            { return BallerinaTypes.BREAK_KEYWORD;
            }
          // fall through
          case 301: break;
          case 111:
            { return BallerinaTypes.CHECK_KEYWORD;
            }
          // fall through
          case 302: break;
          case 112:
            { return BallerinaTypes.CLASS_KEYWORD;
            }
          // fall through
          case 303: break;
          case 113:
            { return BallerinaTypes.CONST_KEYWORD;
            }
          // fall through
          case 304: break;
          case 114:
            { return BallerinaTypes.ERROR_KEYWORD;
            }
          // fall through
          case 305: break;
          case 115:
            { return BallerinaTypes.FALSE_KEYWORD;
            }
          // fall through
          case 306: break;
          case 116:
            { return BallerinaTypes.FIELD_KEYWORD;
            }
          // fall through
          case 307: break;
          case 117:
            { return BallerinaTypes.FINAL_KEYWORD;
            }
          // fall through
          case 308: break;
          case 118:
            { return BallerinaTypes.FLOAT_KEYWORD;
            }
          // fall through
          case 309: break;
          case 119:
            { return BallerinaTypes.FLUSH_KEYWORD;
            }
          // fall through
          case 310: break;
          case 120:
            { return BallerinaTypes.LIMIT_KEYWORD;
            }
          // fall through
          case 311: break;
          case 121:
            { return BallerinaTypes.MATCH_KEYWORD;
            }
          // fall through
          case 312: break;
          case 122:
            { return BallerinaTypes.NEVER_KEYWORD;
            }
          // fall through
          case 313: break;
          case 123:
            { return BallerinaTypes.ORDER_KEYWORD;
            }
          // fall through
          case 314: break;
          case 124:
            { return BallerinaTypes.OUTER_KEYWORD;
            }
          // fall through
          case 315: break;
          case 125:
            { return BallerinaTypes.PANIC_KEYWORD;
            }
          // fall through
          case 316: break;
          case 126:
            { return BallerinaTypes.RETRY_KEYWORD;
            }
          // fall through
          case 317: break;
          case 127:
            { return BallerinaTypes.START_KEYWORD;
            }
          // fall through
          case 318: break;
          case 128:
            { return BallerinaTypes.TABLE_KEYWORD;
            }
          // fall through
          case 319: break;
          case 129:
            { return BallerinaTypes.WHERE_KEYWORD;
            }
          // fall through
          case 320: break;
          case 130:
            { return BallerinaTypes.WHILE_KEYWORD;
            }
          // fall through
          case 321: break;
          case 131:
            { return BallerinaTypes.XMLNS_KEYWORD;
            }
          // fall through
          case 322: break;
          case 132:
            { yybegin(SINGLE_BACKTICKED_MARKDOWN_MODE); return BallerinaTypes.DOCVAR;
            }
          // fall through
          case 323: break;
          case 133:
            { return BallerinaTypes.BASE16_KEYWORD;
            }
          // fall through
          case 324: break;
          case 134:
            { return BallerinaTypes.BASE64_KEYWORD;
            }
          // fall through
          case 325: break;
          case 135:
            { return BallerinaTypes.CLIENT_KEYWORD;
            }
          // fall through
          case 326: break;
          case 136:
            { return BallerinaTypes.COMMIT_KEYWORD;
            }
          // fall through
          case 327: break;
          case 137:
            { return BallerinaTypes.EQUALS_KEYWORD;
            }
          // fall through
          case 328: break;
          case 138:
            { return BallerinaTypes.FUTURE_KEYWORD;
            }
          // fall through
          case 329: break;
          case 139:
            { return BallerinaTypes.HANDLE_KEYWORD;
            }
          // fall through
          case 330: break;
          case 140:
            { return BallerinaTypes.IMPORT_KEYWORD;
            }
          // fall through
          case 331: break;
          case 141:
            { return BallerinaTypes.OBJECT_KEYWORD;
            }
          // fall through
          case 332: break;
          case 142:
            { return BallerinaTypes.PUBLIC_KEYWORD;
            }
          // fall through
          case 333: break;
          case 143:
            { return BallerinaTypes.RECORD_KEYWORD;
            }
          // fall through
          case 334: break;
          case 144:
            { return BallerinaTypes.REMOTE_KEYWORD;
            }
          // fall through
          case 335: break;
          case 145:
            { return BallerinaTypes.RETURN_KEYWORD;
            }
          // fall through
          case 336: break;
          case 146:
            { return BallerinaTypes.SELECT_KEYWORD;
            }
          // fall through
          case 337: break;
          case 147:
            { return BallerinaTypes.SOURCE_KEYWORD;
            }
          // fall through
          case 338: break;
          case 148:
            { return BallerinaTypes.STREAM_KEYWORD;
            }
          // fall through
          case 339: break;
          case 149:
            { return BallerinaTypes.STRING_KEYWORD;
            }
          // fall through
          case 340: break;
          case 150:
            { return BallerinaTypes.TYPEOF_KEYWORD;
            }
          // fall through
          case 341: break;
          case 151:
            { return BallerinaTypes.WORKER_KEYWORD;
            }
          // fall through
          case 342: break;
          case 152:
            { yybegin(SINGLE_BACKTICKED_MARKDOWN_MODE); return BallerinaTypes.DOCTYPE;
            }
          // fall through
          case 343: break;
          case 153:
            { return BallerinaTypes.ANYDATA_KEYWORD;
            }
          // fall through
          case 344: break;
          case 154:
            { return BallerinaTypes.BOOLEAN_KEYWORD;
            }
          // fall through
          case 345: break;
          case 155:
            { return BallerinaTypes.COLLECT_KEYWORD;
            }
          // fall through
          case 346: break;
          case 156:
            { return BallerinaTypes.DECIMAL_KEYWORD;
            }
          // fall through
          case 347: break;
          case 157:
            { return BallerinaTypes.ELSEIF_KEYWORD;
            }
          // fall through
          case 348: break;
          case 158:
            { return BallerinaTypes.FOREACH_KEYWORD;
            }
          // fall through
          case 349: break;
          case 159:
            { return BallerinaTypes.PRIVATE_KEYWORD;
            }
          // fall through
          case 350: break;
          case 160:
            { return BallerinaTypes.RETURNS_KEYWORD;
            }
          // fall through
          case 351: break;
          case 161:
            { return BallerinaTypes.SERVICE_KEYWORD;
            }
          // fall through
          case 352: break;
          case 162:
            { yybegin(SINGLE_BACKTICKED_MARKDOWN_MODE); return BallerinaTypes.DOCCONST;
            }
          // fall through
          case 353: break;
          case 163:
            { return BallerinaTypes.ABSTRACT_KEYWORD;
            }
          // fall through
          case 354: break;
          case 164:
            { return BallerinaTypes.CONFLICT_KEYWORD;
            }
          // fall through
          case 355: break;
          case 165:
            { return BallerinaTypes.CONTINUE_KEYWORD;
            }
          // fall through
          case 356: break;
          case 166:
            { return BallerinaTypes.DISTINCT_KEYWORD;
            }
          // fall through
          case 357: break;
          case 167:
            { return BallerinaTypes.EXTERNAL_KEYWORD;
            }
          // fall through
          case 358: break;
          case 168:
            { return BallerinaTypes.FUNCTION_KEYWORD;
            }
          // fall through
          case 359: break;
          case 169:
            { return BallerinaTypes.ISOLATED_KEYWORD;
            }
          // fall through
          case 360: break;
          case 170:
            { return BallerinaTypes.LISTENER_KEYWORD;
            }
          // fall through
          case 361: break;
          case 171:
            { return BallerinaTypes.READONLY_KEYWORD;
            }
          // fall through
          case 362: break;
          case 172:
            { return BallerinaTypes.RESOURCE_KEYWORD;
            }
          // fall through
          case 363: break;
          case 173:
            { return BallerinaTypes.ROLLBACK_KEYWORD;
            }
          // fall through
          case 364: break;
          case 174:
            { return BallerinaTypes.TYPEDESC_KEYWORD;
            }
          // fall through
          case 365: break;
          case 175:
            { yybegin(SINGLE_BACKTICKED_MARKDOWN_MODE); return BallerinaTypes.DOCMODULE;
            }
          // fall through
          case 366: break;
          case 176:
            { yybegin(MARKDOWN_DOCUMENTATION_MODE); return BallerinaTypes.RETURN_PARAMETER_DOCUMENTATION_START;
            }
          // fall through
          case 367: break;
          case 177:
            { return BallerinaTypes.ASCENDING_KEYWORD;
            }
          // fall through
          case 368: break;
          case 178:
            { return BallerinaTypes.PARAMETER_KEYWORD;
            }
          // fall through
          case 369: break;
          case 179:
            { yybegin(SINGLE_BACKTICKED_MARKDOWN_MODE); return BallerinaTypes.DOCSERVICE;
            }
          // fall through
          case 370: break;
          case 180:
            { return BallerinaTypes.ANNOTATION_KEYWORD;
            }
          // fall through
          case 371: break;
          case 181:
            { return BallerinaTypes.CHECKPANIC_KEYWORD;
            }
          // fall through
          case 372: break;
          case 182:
            { return BallerinaTypes.DESCENDING_KEYWORD;
            }
          // fall through
          case 373: break;
          case 183:
            { yybegin(SINGLE_BACKTICKED_MARKDOWN_MODE); return BallerinaTypes.DOCFUNCTION;
            }
          // fall through
          case 374: break;
          case 184:
            { yybegin(SINGLE_BACKTICKED_MARKDOWN_MODE); return BallerinaTypes.DOCVARIABLE;
            }
          // fall through
          case 375: break;
          case 185:
            { return BallerinaTypes.TRANSACTION_KEYWORD;
            }
          // fall through
          case 376: break;
          case 186:
            { yybegin(SINGLE_BACKTICKED_MARKDOWN_MODE); return BallerinaTypes.DOCPARAMETER;
            }
          // fall through
          case 377: break;
          case 187:
            { return BallerinaTypes.CONFIGURABLE_KEYWORD;
            }
          // fall through
          case 378: break;
          case 188:
            { yybegin(SINGLE_BACKTICKED_MARKDOWN_MODE); return BallerinaTypes.DOCANNOTATION;
            }
          // fall through
          case 379: break;
          case 189:
            { return BallerinaTypes.TRANSACTIONAL_KEYWORD;
            }
          // fall through
          case 380: break;
          case 190:
            { yybegin(MARKDOWN_DOCUMENTATION_MODE); return BallerinaTypes.DEPRECATED_DOCUMENTATION;
            }
          // fall through
          case 381: break;
          case 191:
            { yybegin(MARKDOWN_DOCUMENTATION_MODE); return BallerinaTypes.DEPRECATED_PARAMETER_DOCUMENTATION;
            }
          // fall through
          case 382: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
