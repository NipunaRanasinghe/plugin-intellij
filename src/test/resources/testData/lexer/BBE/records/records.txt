import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This defines a new record named `Person`.')
WHITE_SPACE ('\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Person')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Person')
? ('?')
WHITE_SPACE (' ')
identifier ('parent')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('status')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This creates an instance of the`Person` record with an empty record literal. The implicit initial value of each')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// field type is assigned to the corresponding field.')
WHITE_SPACE ('\n    ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('p1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('p1')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This creates an instance of the `Person` record with a non-empty record literal.')
WHITE_SPACE ('\n    ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('p2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Jack"')
, (',')
WHITE_SPACE (' ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('20')
, (',')
WHITE_SPACE (' ')
identifier ('parent')
: (':')
WHITE_SPACE (' ')
identifier ('p1')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('p2')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This fetches the value of a specific field in this record. Fields can be accessed using dot (.) or the index operator.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('p2')
. ('.')
identifier ('name')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('p2')
[ ('[')
QUOTED_STRING_LITERAL ('"name"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This fetches the field of a nested struct.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('p2')
. ('.')
identifier ('parent')
. ('.')
identifier ('age')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This sets the value of a field.')
WHITE_SPACE ('\n    ')
identifier ('p1')
. ('.')
identifier ('name')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Peter"')
; (';')
WHITE_SPACE ('\n    ')
identifier ('p1')
. ('.')
identifier ('age')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('25')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('p1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('p2')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
