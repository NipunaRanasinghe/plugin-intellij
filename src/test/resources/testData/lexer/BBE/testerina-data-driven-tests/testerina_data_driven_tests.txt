import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('test')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The `dataProvider` attribute allows you to add a data provider function to the test-case. ')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `ValueProvider` provides the data set to this function.')
WHITE_SPACE ('\n    ')
identifier ('dataProvider')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ValueProvider"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
LINE_COMMENT ('// Data is parsed to the function as function parameters.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAddingValues')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('fValue')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('sValue')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('result')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('value1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
< ('<')
int ('int')
> ('>')
identifier ('fValue')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('value2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
< ('<')
int ('int')
> ('>')
identifier ('sValue')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('result1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
check ('check')
WHITE_SPACE (' ')
< ('<')
int ('int')
> ('>')
identifier ('result')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Input : ["')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('fValue')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('","')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('sValue')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('","')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"]"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertEquals')
( ('(')
identifier ('value1')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('value2')
, (',')
WHITE_SPACE (' ')
identifier ('result1')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Incorrect Sum"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The data provider function. In this scenario, it returns a string value-set. ')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('ValueProvider')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
string ('string')
[ ('[')
] (']')
[ ('[')
] (']')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
[ ('[')
[ ('[')
QUOTED_STRING_LITERAL ('"1"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"2"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"3"')
] (']')
, (',')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"10"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"20"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"30"')
] (']')
, (',')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"5"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"6"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"11"')
] (']')
] (']')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This is the test function. Here we provide a JSON value set as the dataset.')
WHITE_SPACE ('\n')
@ ('@')
identifier ('test')
: (':')
identifier ('Config')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('dataProvider')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"jsonDataProvider"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testJsonObjects')
( ('(')
json ('json')
WHITE_SPACE (' ')
identifier ('fValue')
, (',')
WHITE_SPACE (' ')
json ('json')
WHITE_SPACE (' ')
identifier ('sValue')
, (',')
WHITE_SPACE (' ')
json ('json')
WHITE_SPACE (' ')
identifier ('result')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"a"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"a"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"b"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"b"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('c')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"c"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"c"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertEquals')
( ('(')
identifier ('fValue')
, (',')
WHITE_SPACE (' ')
identifier ('a')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"json data provider failed"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertEquals')
( ('(')
identifier ('sValue')
, (',')
WHITE_SPACE (' ')
identifier ('b')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"json data provider failed"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('test')
: (':')
identifier ('assertEquals')
( ('(')
identifier ('result')
, (',')
WHITE_SPACE (' ')
identifier ('c')
, (',')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"json data provider failed"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function returns a JSON value set.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('jsonDataProvider')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
json ('json')
[ ('[')
] (']')
[ ('[')
] (']')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
[ ('[')
[ ('[')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"a"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"a"')
WHITE_SPACE (' ')
} ('}')
, (',')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"b"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"b"')
WHITE_SPACE (' ')
} ('}')
, (',')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"c"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"c"')
WHITE_SPACE (' ')
} ('}')
] (']')
] (']')
; (';')
WHITE_SPACE ('\n')
} ('}')
