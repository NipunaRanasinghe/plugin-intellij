import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This type represents a person.')
WHITE_SPACE ('\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Person')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('id')
, (',')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
- ('-')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('salary')
, (',')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
, (',')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('married')
, (',')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This type represents an order.')
WHITE_SPACE ('\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Order')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('personId')
, (',')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('orderId')
, (',')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('items')
, (',')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('amount')
, (',')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This type represents the summed up order details.')
WHITE_SPACE ('\n')
type ('type')
WHITE_SPACE (' ')
identifier ('SummedOrder')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('personId')
, (',')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('amount')
, (',')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This type represents order details (this is derived by joining the person details')
WHITE_SPACE ('\n')
LINE_COMMENT ('//and the order details).')
WHITE_SPACE ('\n')
type ('type')
WHITE_SPACE (' ')
identifier ('OrderDetails')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('orderId')
, (',')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('personName')
, (',')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('items')
, (',')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('amount')
, (',')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This type represents the Person public profile.')
WHITE_SPACE ('\n')
type ('type')
WHITE_SPACE (' ')
identifier ('PersonPublicProfile')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('knownName')
, (',')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
- ('-')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This is the main function.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
string ('string')
... ('...')
WHITE_SPACE (' ')
identifier ('args')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This is the in-memory table that is constrained by the `Person` struct.')
WHITE_SPACE ('\n    ')
table ('table')
< ('<')
identifier ('Person')
> ('>')
WHITE_SPACE (' ')
identifier ('personTable')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
table ('table')
{ ('{')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This is the in-memory table that is constrained by the `Order` struct.')
WHITE_SPACE ('\n    ')
table ('table')
< ('<')
identifier ('Order')
> ('>')
WHITE_SPACE (' ')
identifier ('orderTable')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
table ('table')
{ ('{')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// These are a few sample values that represent different person structs.')
WHITE_SPACE ('\n    ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('p1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n        ')
{ ('{')
WHITE_SPACE (' ')
identifier ('id')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('25')
, (',')
WHITE_SPACE (' ')
identifier ('salary')
: (':')
WHITE_SPACE (' ')
FLOATING_POINT_LITERAL ('1000.50')
, (',')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"jane"')
, (',')
WHITE_SPACE (' ')
identifier ('married')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('p2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n        ')
{ ('{')
WHITE_SPACE (' ')
identifier ('id')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('26')
, (',')
WHITE_SPACE (' ')
identifier ('salary')
: (':')
WHITE_SPACE (' ')
FLOATING_POINT_LITERAL ('1050.50')
, (',')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"kane"')
, (',')
WHITE_SPACE (' ')
identifier ('married')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('p3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n        ')
{ ('{')
WHITE_SPACE (' ')
identifier ('id')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
, (',')
WHITE_SPACE (' ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('27')
, (',')
WHITE_SPACE (' ')
identifier ('salary')
: (':')
WHITE_SPACE (' ')
FLOATING_POINT_LITERAL ('1200.50')
, (',')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"jack"')
, (',')
WHITE_SPACE (' ')
identifier ('married')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('p4')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n        ')
{ ('{')
WHITE_SPACE (' ')
identifier ('id')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('4')
, (',')
WHITE_SPACE (' ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('28')
, (',')
WHITE_SPACE (' ')
identifier ('salary')
: (':')
WHITE_SPACE (' ')
FLOATING_POINT_LITERAL ('1100.50')
, (',')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"alex"')
, (',')
WHITE_SPACE (' ')
identifier ('married')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Person')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('personData')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
identifier ('p1')
, (',')
WHITE_SPACE (' ')
identifier ('p2')
, (',')
WHITE_SPACE (' ')
identifier ('p3')
, (',')
WHITE_SPACE (' ')
identifier ('p4')
] (']')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This inserts the `Person` struct objects into the table and populates it.')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
( ('(')
identifier ('p')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('personData')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('personTable')
. ('.')
identifier ('add')
( ('(')
identifier ('p')
) (')')
; (';')
WHITE_SPACE ('\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('ret')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
( ('(')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('print')
( ('(')
QUOTED_STRING_LITERAL ('"\nAdding to table successful"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Adding to table failed: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This prints the `Person` table content.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('print')
( ('(')
QUOTED_STRING_LITERAL ('"\nThe personTable: "')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('personTable')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// These are a few sample values that represent orders made by the people who were listed')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//above as person structs.')
WHITE_SPACE ('\n    ')
identifier ('Order')
WHITE_SPACE (' ')
identifier ('o1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n        ')
{ ('{')
WHITE_SPACE (' ')
identifier ('personId')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
identifier ('orderId')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1234')
, (',')
WHITE_SPACE (' ')
identifier ('items')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"pen, book, eraser"')
, (',')
WHITE_SPACE (' ')
identifier ('amount')
: (':')
WHITE_SPACE (' ')
FLOATING_POINT_LITERAL ('34.75')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Order')
WHITE_SPACE (' ')
identifier ('o2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n        ')
{ ('{')
WHITE_SPACE (' ')
identifier ('personId')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
identifier ('orderId')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2314')
, (',')
WHITE_SPACE (' ')
identifier ('items')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"dhal, rice, carrot"')
, (',')
WHITE_SPACE (' ')
identifier ('amount')
: (':')
WHITE_SPACE (' ')
FLOATING_POINT_LITERAL ('14.75')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Order')
WHITE_SPACE (' ')
identifier ('o3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n        ')
{ ('{')
WHITE_SPACE (' ')
identifier ('personId')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
identifier ('orderId')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5643')
, (',')
WHITE_SPACE (' ')
identifier ('items')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Macbook Pro"')
, (',')
WHITE_SPACE (' ')
identifier ('amount')
: (':')
WHITE_SPACE (' ')
FLOATING_POINT_LITERAL ('2334.75')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Order')
WHITE_SPACE (' ')
identifier ('o4')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n        ')
{ ('{')
WHITE_SPACE (' ')
identifier ('personId')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
, (',')
WHITE_SPACE (' ')
identifier ('orderId')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('8765')
, (',')
WHITE_SPACE (' ')
identifier ('items')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Tshirt"')
, (',')
WHITE_SPACE (' ')
identifier ('amount')
: (':')
WHITE_SPACE (' ')
FLOATING_POINT_LITERAL ('20.75')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Order')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('orderData')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
identifier ('o1')
, (',')
WHITE_SPACE (' ')
identifier ('o2')
, (',')
WHITE_SPACE (' ')
identifier ('o3')
, (',')
WHITE_SPACE (' ')
identifier ('o4')
] (']')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This inserts the `Order` struct objects into the table and populates it.')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
( ('(')
identifier ('o')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('orderData')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('orderTable')
. ('.')
identifier ('add')
( ('(')
identifier ('o')
) (')')
; (';')
WHITE_SPACE ('\n        ')
match ('match')
WHITE_SPACE (' ')
identifier ('ret')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
( ('(')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('print')
( ('(')
QUOTED_STRING_LITERAL ('"\nAdding to order successful"')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Adding to order failed: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This prints the `Order` table content.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('print')
( ('(')
QUOTED_STRING_LITERAL ('"\nThe orderTable: "')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('orderTable')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Querying for a table always returns a new in-memory table.')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// 1. This queries for all the records in a table and returns them as another in-memory table.')
WHITE_SPACE ('\n    ')
table ('table')
< ('<')
identifier ('Person')
> ('>')
WHITE_SPACE (' ')
identifier ('personTableCopy')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
from ('from')
WHITE_SPACE (' ')
identifier ('personTable')
WHITE_SPACE (' ')
select ('select')
WHITE_SPACE (' ')
* ('*')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\ntable<Person> personTableCopy = "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n            ')
QUOTED_STRING_LITERAL ('"from personTable select *;"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('print')
( ('(')
QUOTED_STRING_LITERAL ('"personTableCopy: "')
) (')')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
json ('json')
> ('>')
identifier ('personTableCopy')
; (';')
WHITE_SPACE ('\n    ')
identifier ('printTable')
( ('(')
identifier ('ret')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// 2. This queries for all the records and returns them in the ascending order of the salary.')
WHITE_SPACE ('\n    ')
table ('table')
< ('<')
identifier ('Person')
> ('>')
WHITE_SPACE (' ')
identifier ('orderedPersonTableCopy')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                        ')
from ('from')
WHITE_SPACE (' ')
identifier ('personTable')
WHITE_SPACE (' ')
select ('select')
WHITE_SPACE (' ')
* ('*')
WHITE_SPACE (' ')
order ('order')
WHITE_SPACE (' ')
by ('by')
WHITE_SPACE (' ')
identifier ('salary')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\ntable<Person> orderedPersonTableCopy = "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n            ')
QUOTED_STRING_LITERAL ('"from personTable select * order by salary;"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('print')
( ('(')
QUOTED_STRING_LITERAL ('"orderedPersonTableCopy: "')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
json ('json')
> ('>')
identifier ('orderedPersonTableCopy')
; (';')
WHITE_SPACE ('\n    ')
identifier ('printTable')
( ('(')
identifier ('ret')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// 3. This queries for all the records in a table that match a specific filter criterion,')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//and returns the results as another in-memory table.')
WHITE_SPACE ('\n    ')
table ('table')
< ('<')
identifier ('Person')
> ('>')
WHITE_SPACE (' ')
identifier ('personTableCopyWithFilter')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                        ')
from ('from')
WHITE_SPACE (' ')
identifier ('personTable')
WHITE_SPACE (' ')
where ('where')
WHITE_SPACE (' ')
identifier ('name')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"jane"')
WHITE_SPACE ('\n    ')
select ('select')
WHITE_SPACE (' ')
* ('*')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\ntable<Person> personTableCopyWithFilter = "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n            ')
QUOTED_STRING_LITERAL ('"from personTable where name == 'jane' select *;"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('print')
( ('(')
QUOTED_STRING_LITERAL ('"personTableCopyWithFilter: "')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
json ('json')
> ('>')
identifier ('personTableCopyWithFilter')
; (';')
WHITE_SPACE ('\n    ')
identifier ('printTable')
( ('(')
identifier ('ret')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// 4. This queries only new fields in a table and returns the results as a new in-memory')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//table constrained by a different struct.')
WHITE_SPACE ('\n    ')
table ('table')
< ('<')
identifier ('PersonPublicProfile')
> ('>')
WHITE_SPACE (' ')
identifier ('childTable')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
from ('from')
WHITE_SPACE (' ')
identifier ('personTable')
WHITE_SPACE ('\n    ')
select ('select')
WHITE_SPACE (' ')
identifier ('name')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('knownName')
, (',')
WHITE_SPACE (' ')
identifier ('age')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\ntable<PersonPublicProfile > childTable = "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n            ')
QUOTED_STRING_LITERAL ('"from personTable select name as knownName, age;"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('print')
( ('(')
QUOTED_STRING_LITERAL ('"childTable: "')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
json ('json')
> ('>')
identifier ('childTable')
; (';')
WHITE_SPACE ('\n    ')
identifier ('printTable')
( ('(')
identifier ('ret')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// 5. This applies the `group by` clause to a table and returns a new table with the result.')
WHITE_SPACE ('\n    ')
table ('table')
< ('<')
identifier ('SummedOrder')
> ('>')
WHITE_SPACE (' ')
identifier ('summedOrderTable')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
from ('from')
WHITE_SPACE (' ')
identifier ('orderTable')
WHITE_SPACE ('\n    ')
select ('select')
WHITE_SPACE (' ')
identifier ('personId')
, (',')
WHITE_SPACE (' ')
identifier ('sum')
( ('(')
identifier ('amount')
) (')')
WHITE_SPACE (' ')
group ('group')
WHITE_SPACE (' ')
by ('by')
WHITE_SPACE (' ')
identifier ('personId')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\ntable<SummedOrder> summedOrderTable = "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n            ')
QUOTED_STRING_LITERAL ('"from orderTable select personId, sum(amount) group by\n    personId;"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('print')
( ('(')
QUOTED_STRING_LITERAL ('"summedOrderTable: "')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
json ('json')
> ('>')
identifier ('summedOrderTable')
; (';')
WHITE_SPACE ('\n    ')
identifier ('printTable')
( ('(')
identifier ('ret')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// 6. This joins a table with another table and returns the selected fields in a table')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//constrained by a different struct.')
WHITE_SPACE ('\n    ')
table ('table')
< ('<')
identifier ('OrderDetails')
> ('>')
WHITE_SPACE (' ')
identifier ('orderDetailsTable')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                    ')
from ('from')
WHITE_SPACE (' ')
identifier ('personTable')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('tempPersonTable')
WHITE_SPACE ('\n                    ')
join ('join')
WHITE_SPACE (' ')
identifier ('orderTable')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('tempOrderTable')
WHITE_SPACE ('\n                        ')
on ('on')
WHITE_SPACE (' ')
identifier ('tempPersonTable')
. ('.')
identifier ('id')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('tempOrderTable')
. ('.')
identifier ('personId')
WHITE_SPACE ('\n                    ')
select ('select')
WHITE_SPACE (' ')
identifier ('tempOrderTable')
. ('.')
identifier ('orderId')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('orderId')
, (',')
WHITE_SPACE ('\n                            ')
identifier ('tempPersonTable')
. ('.')
identifier ('name')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('personName')
, (',')
WHITE_SPACE ('\n                            ')
identifier ('tempOrderTable')
. ('.')
identifier ('items')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('items')
, (',')
WHITE_SPACE ('\n                            ')
identifier ('tempOrderTable')
. ('.')
identifier ('amount')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('amount')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\ntable<OrderDetails> orderDetailsTable = "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n            ')
QUOTED_STRING_LITERAL ('"from personTable as tempPersonTable\n            join orderTable as tempOrderTable "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                    ')
QUOTED_STRING_LITERAL ('"on tempPersonTable.id == tempOrderTable.personId\n            select tempOrderTable.orderId as orderId, "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                    ')
QUOTED_STRING_LITERAL ('"tempPersonTable.name as personName, "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                    ')
QUOTED_STRING_LITERAL ('"tempOrderTable.items as items, "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                    ')
QUOTED_STRING_LITERAL ('"tempOrderTable.amount as amount;"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('print')
( ('(')
QUOTED_STRING_LITERAL ('"orderDetailsTable: "')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
json ('json')
> ('>')
identifier ('orderDetailsTable')
; (';')
WHITE_SPACE ('\n    ')
identifier ('printTable')
( ('(')
identifier ('ret')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// 7. This joins a table with another table using the `where` clause and return the selected fields in a')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// table constrained by a different struct.')
WHITE_SPACE ('\n    ')
table ('table')
< ('<')
identifier ('OrderDetails')
> ('>')
WHITE_SPACE (' ')
identifier ('orderDetailsWithFilter')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                    ')
from ('from')
WHITE_SPACE (' ')
identifier ('personTable')
WHITE_SPACE ('\n                    ')
where ('where')
WHITE_SPACE (' ')
identifier ('name')
WHITE_SPACE (' ')
!= ('!=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"jane"')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('tempPersonTable')
WHITE_SPACE (' ')
join ('join')
WHITE_SPACE (' ')
identifier ('orderTable')
WHITE_SPACE ('\n                    ')
where ('where')
WHITE_SPACE (' ')
identifier ('personId')
WHITE_SPACE (' ')
!= ('!=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('tempOrderTable')
WHITE_SPACE ('\n                            ')
on ('on')
WHITE_SPACE (' ')
identifier ('tempPersonTable')
. ('.')
identifier ('id')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('tempOrderTable')
. ('.')
identifier ('personId')
WHITE_SPACE ('\n                    ')
select ('select')
WHITE_SPACE (' ')
identifier ('tempOrderTable')
. ('.')
identifier ('orderId')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('orderId')
, (',')
WHITE_SPACE ('\n                            ')
identifier ('tempPersonTable')
. ('.')
identifier ('name')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('personName')
, (',')
WHITE_SPACE ('\n                            ')
identifier ('tempOrderTable')
. ('.')
identifier ('items')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('items')
, (',')
WHITE_SPACE ('\n                            ')
identifier ('tempOrderTable')
. ('.')
identifier ('amount')
WHITE_SPACE (' ')
as ('as')
WHITE_SPACE (' ')
identifier ('amount')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\ntable<OrderDetails> orderDetailsWithFilter = "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n            ')
QUOTED_STRING_LITERAL ('"from personTable where name != 'jane' as tempPersonTable\n             join orderTable where personId != 3 as tempOrderTable "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                    ')
QUOTED_STRING_LITERAL ('"on tempPersonTable.id == tempOrderTable.personId\n             select tempOrderTable.orderId as orderId, "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                    ')
QUOTED_STRING_LITERAL ('"tempPersonTable.name as personName,"')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                    ')
QUOTED_STRING_LITERAL ('"tempOrderTable.items as items,\n                    tempOrderTable.amount as amount;"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('print')
( ('(')
QUOTED_STRING_LITERAL ('"orderDetailsWithFilter: "')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
json ('json')
> ('>')
identifier ('orderDetailsWithFilter')
; (';')
WHITE_SPACE ('\n    ')
identifier ('printTable')
( ('(')
identifier ('ret')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('printTable')
( ('(')
json ('json')
| ('|')
identifier ('error')
WHITE_SPACE (' ')
identifier ('retData')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('retData')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
json ('json')
WHITE_SPACE (' ')
identifier ('jsonRes')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"%s"')
, (',')
WHITE_SPACE (' ')
identifier ('jsonRes')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('error')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error in table to json conversion"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
